#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import (division, print_function, absolute_import,
                        unicode_literals)

__all__ = []

import numpy as np
import matplotlib.pyplot as pl


def eval_gaussian(x, y, params):
    det = params[3] * params[5] - params[4] * params[4]
    dx = x - params[1]
    dy = y - params[2]
    v = dx*(params[5]*dx-params[4]*dy) + dy*(params[3]*dy-params[4]*dx)
    return params[0] * np.exp(-0.5 * v / det) / np.sqrt(det) / (2 * np.pi)


if __name__ == "__main__":
    import os
    import fitsio

    data = fitsio.read("data/kplr07.4_2011265_prf.fits", 2)

    x, y = np.meshgrid(range(550), range(550))
    img = np.zeros((550, 550))
    # params = map(float, "1.111336489580287e+01 2.479680077155226e+02 2.979649441848876e+02 1.076121093443112e+02 -6.188174285272305e+01 1.535148647233786e+02 1.940058570292975e+02 2.873303215775574e+02 2.482846938829043e+02 3.357341220084088e+02 -5.316284821398006e+01 2.598955720170297e+02 2.347418781043263e+01 3.114210708003265e+02 2.562800742244045e+02 7.459499073997868e+01 -2.118897778723732e+01 9.740877415849282e+01 1.423082443488382e+02 2.350366391999576e+02 2.931726615233997e+02 8.758872442687664e+02 -4.465044576290261e+02 1.618571562016753e+03 1.119800927965907e+02 3.209797613503106e+02 3.361816186173061e+02 1.615195963195332e+03 1.119059131122345e+02 1.498689112082264e+03 9.894912336746956e+02 2.735992038773006e+02 2.817882069930847e+02 1.013513110118041e+03 4.387053158941067e+02 7.449787445911775e+02 5.628081342933054e+02 2.781804617562101e+02 2.758198129738208e+02 7.405148655416451e+02 -3.123748878007493e+02 6.526668280290322e+02 1.557447997789847e+02 2.633930743009844e+02 2.319485263042159e+02 6.181749732172535e+02 9.271265978654318e+01 3.825847969790764e+02 1.769920798775387e+02 2.974065285912463e+02 2.728051499966786e+02 4.955043369894444e+02 9.376555900006974e+01 2.374151908350067e+02 1.291990322120568e+02 2.190800055120307e+02 2.222052065700605e+02 1.994050625005577e+03 -2.464435821150115e+02 1.732822863270052e+03".split())
    # params = [6.770404433536722e+02, 2.762935903923822e+02,
    #           2.749598767172011e+02, 7.416890436623951e+02,
    #           -3.343691246545156e+02, 6.619360110902708e+02,

    #           1.013104088640231e+03, 2.752617356828034e+02,
    #           2.782692347472079e+02, 9.510088076647189e+02,
    #           4.390305404852699e+02, 8.422108144528074e+02,

    #           3.333880733018846e+02, 2.926736066208942e+02,
    #           2.534139667905637e+02, 4.895208499379691e+02,
    #           2.205307356207573e+02, 5.703204719619104e+02,

    #           1.519589034528572e+02, 2.333031340758898e+02,
    #           2.632627609378368e+02, 6.908909389531161e+02,
    #           -5.895578007388284e+02, 3.238777222944417e+03,

    #           3.235544984490037e+02, 2.679224614845855e+02,
    #           2.833105663499892e+02, 3.931568412987759e+03,
    #           2.502376695618981e+03, 3.538192872356393e+03]
    # params = [2.915833244208833e+04, 2.735633857574925e+02,
    #           2.742223432038766e+02, 5.211941987944883e+02,
    #           -8.944516504432210e+01, 5.879410774593420e+02,

    #           3.025293345134226e+04, 2.607438993820401e+02,
    #           2.956945695197564e+02, 1.277352635225708e+03,
    #           5.048991908551289e+02, 1.463315586987894e+03,

    #           -2.796470156149930e+04, 2.734168793727937e+02,
    #           2.742428812230638e+02, 5.125874814953697e+02,
    #           -8.402046185136133e+01, 5.838428245831113e+02,

    #           -2.898342186867430e+04, 2.602549479814064e+02,
    #           2.966132825047101e+02, 1.257175583197801e+03,
    #           5.099014252467668e+02, 1.438133935163568e+03]

    params = map(float, "3.806876203850078e+02 2.505627694904560e+02 2.763535618736569e+02 6.391325827505096e+02 -3.419946429444601e+02 1.442603119866008e+03 1.403112627912084e+03 2.847748751225249e+02 2.749597071354768e+02 5.144272565016713e+02 -8.451328047369842e+01 5.809520280161025e+02 6.599210025595916e+02 2.709156875728786e+02 2.727530895585866e+02 1.685425678636225e+03 8.924337167330976e+02 1.166496482103710e+03".split())

    # params = map(float, "5.850453403169205e+02 2.675532749930567e+02 2.790597290690931e+02 8.277298518203794e+02 -3.307466346563699e+02 6.659523195646331e+02 5.910555358884222e+02 2.889380199203887e+02 2.656524272359351e+02 4.803301452229936e+02 -2.811943144088658e+01 6.640813836439181e+02 1.247479515211620e+03 2.724709501377191e+02 2.738468530563703e+02 1.425585000810552e+03 7.171119995323870e+02 1.342670405567586e+03".split())
    # params = [1133.11, 280.013, 271.219, 662.4, -164.3, 631.087,
    #           1306.12, 272.721, 274.167, 1553.68, 663.829, 1432.0]

    print(params[::6])

    for i in range(int(len(params) / 6)):
        img += eval_gaussian(x, y, params[6*i:6*(i+1)])

    d = "demo/{0}".format(int(len(params)/6))
    try:
        os.makedirs(d)
    except os.error:
        pass

    pl.clf()
    vmin, vmax = 0.05, 0.2
    pl.imshow(data, cmap="gray", interpolation="nearest", vmin=vmin, vmax=vmax)
    pl.xlim(0, 550)
    pl.ylim(0, 550)
    pl.colorbar()
    pl.savefig("{0}/mog_test_prf.png".format(d))

    pl.clf()
    pl.imshow(img, cmap="gray", interpolation="nearest", vmin=vmin, vmax=vmax)
    pl.plot(params[1::6], params[2::6], "+r")
    pl.xlim(0, 550)
    pl.ylim(0, 550)
    pl.colorbar()
    pl.savefig("{0}/mog_test_mog.png".format(d))

    pl.clf()
    pl.imshow(img - data, cmap="gray", interpolation="nearest")
    pl.xlim(0, 550)
    pl.ylim(0, 550)
    pl.colorbar()
    pl.savefig("{0}/mog_test_delta.png".format(d))
